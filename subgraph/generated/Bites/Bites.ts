// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class BiteCreated extends ethereum.Event {
  get params(): BiteCreated__Params {
    return new BiteCreated__Params(this);
  }
}

export class BiteCreated__Params {
  _event: BiteCreated;

  constructor(event: BiteCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get content(): string {
    return this._event.parameters[1].value.toString();
  }

  get imageHash(): string {
    return this._event.parameters[2].value.toString();
  }

  get author(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class CommentedOnBite extends ethereum.Event {
  get params(): CommentedOnBite__Params {
    return new CommentedOnBite__Params(this);
  }
}

export class CommentedOnBite__Params {
  _event: CommentedOnBite;

  constructor(event: CommentedOnBite) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get biteId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get content(): string {
    return this._event.parameters[2].value.toString();
  }

  get author(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Bites__biteCommentsResult {
  value0: BigInt;
  value1: BigInt;
  value2: string;
  value3: Address;

  constructor(value0: BigInt, value1: BigInt, value2: string, value3: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getBiteId(): BigInt {
    return this.value1;
  }

  getContent(): string {
    return this.value2;
  }

  getAuthor(): Address {
    return this.value3;
  }
}

export class Bites__bitesResult {
  value0: BigInt;
  value1: string;
  value2: string;
  value3: Address;

  constructor(value0: BigInt, value1: string, value2: string, value3: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getContent(): string {
    return this.value1;
  }

  getImageHash(): string {
    return this.value2;
  }

  getAuthor(): Address {
    return this.value3;
  }
}

export class Bites extends ethereum.SmartContract {
  static bind(address: Address): Bites {
    return new Bites("Bites", address);
  }

  biteComments(biteId: BigInt, commentId: BigInt): Bites__biteCommentsResult {
    let result = super.call(
      "biteComments",
      "biteComments(uint256,uint256):(uint256,uint256,string,address)",
      [
        ethereum.Value.fromUnsignedBigInt(biteId),
        ethereum.Value.fromUnsignedBigInt(commentId),
      ],
    );

    return new Bites__biteCommentsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toString(),
      result[3].toAddress(),
    );
  }

  try_biteComments(
    biteId: BigInt,
    commentId: BigInt,
  ): ethereum.CallResult<Bites__biteCommentsResult> {
    let result = super.tryCall(
      "biteComments",
      "biteComments(uint256,uint256):(uint256,uint256,string,address)",
      [
        ethereum.Value.fromUnsignedBigInt(biteId),
        ethereum.Value.fromUnsignedBigInt(commentId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Bites__biteCommentsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toString(),
        value[3].toAddress(),
      ),
    );
  }

  bites(biteId: BigInt): Bites__bitesResult {
    let result = super.call(
      "bites",
      "bites(uint256):(uint256,string,string,address)",
      [ethereum.Value.fromUnsignedBigInt(biteId)],
    );

    return new Bites__bitesResult(
      result[0].toBigInt(),
      result[1].toString(),
      result[2].toString(),
      result[3].toAddress(),
    );
  }

  try_bites(biteId: BigInt): ethereum.CallResult<Bites__bitesResult> {
    let result = super.tryCall(
      "bites",
      "bites(uint256):(uint256,string,string,address)",
      [ethereum.Value.fromUnsignedBigInt(biteId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Bites__bitesResult(
        value[0].toBigInt(),
        value[1].toString(),
        value[2].toString(),
        value[3].toAddress(),
      ),
    );
  }
}

export class CommentOnBiteCall extends ethereum.Call {
  get inputs(): CommentOnBiteCall__Inputs {
    return new CommentOnBiteCall__Inputs(this);
  }

  get outputs(): CommentOnBiteCall__Outputs {
    return new CommentOnBiteCall__Outputs(this);
  }
}

export class CommentOnBiteCall__Inputs {
  _call: CommentOnBiteCall;

  constructor(call: CommentOnBiteCall) {
    this._call = call;
  }

  get _biteId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _content(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CommentOnBiteCall__Outputs {
  _call: CommentOnBiteCall;

  constructor(call: CommentOnBiteCall) {
    this._call = call;
  }
}

export class CreateBiteCall extends ethereum.Call {
  get inputs(): CreateBiteCall__Inputs {
    return new CreateBiteCall__Inputs(this);
  }

  get outputs(): CreateBiteCall__Outputs {
    return new CreateBiteCall__Outputs(this);
  }
}

export class CreateBiteCall__Inputs {
  _call: CreateBiteCall;

  constructor(call: CreateBiteCall) {
    this._call = call;
  }

  get _content(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _imageHash(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CreateBiteCall__Outputs {
  _call: CreateBiteCall;

  constructor(call: CreateBiteCall) {
    this._call = call;
  }
}
